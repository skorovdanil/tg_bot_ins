from aiogram import types, F, Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from dotenv import load_dotenv
load_dotenv()
import  os

import re
from states import Admin

from markups import admin_markups as adm_mark

from states import Worker

from markups import worker_markups as work_mark

from db import main_db


router = Router()

@router.message(Command("start"))
async def command_start(message: Message, state: FSMContext):
    # –ï–°–õ–ò –ê–î–ú–ò–ù
    telegram_id = str(message.from_user.id)
    # admins_str = os.getenv("ADMINS_ID")
    # admins_id = admins_str.split(',')
    # if telegram_id in admins_id:
    #     await state.set_state(Admin.admin_action)
    #     await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ", reply_markup=adm_mark.AdminMainMenu)

    #–ï–°–õ–ò –†–ê–ë–û–ß–ò–ô –£–ñ–ï –ó–ê–†–ï–ì–ï–°–¢–†–ò–†–û–í–ê–ù
    if await main_db.find_worker(telegram_id) == True:
        await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ", reply_markup=work_mark.WorkerMainMenu)
        await state.set_state(Worker.worker_action)

    else:
        #–ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê –ü–†–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò (–ù–ï –ó–ê–ì–ï–°–¢–†–ò–†–û–í–ê–ù)
        await state.set_state(Worker.registr_number)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")



#–ò–ú–Ø –ü–†–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò
@router.message(Worker.registr_number)
async def registr_number(message: Message, state: FSMContext):
    reg_number = message.text
    pattern = re.compile(r"^(8|\+7)?\s?(9\d{2})\d{7}$")
    if re.match(pattern, reg_number):
        await state.set_state(Worker.registr_name)
        await state.update_data(number=reg_number)
        await state.update_data(telegram_id=message.from_user.id)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è")
    else:
        await state.set_state(Worker.registr_number)
        await message.answer("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")



#–í–´–ë–û–† –†–ï–ì–ò–û–ù–ê –ü–†–ò –†–ï–ì–ò–°–¢–ê–†–¶–ò–ò
@router.message(Worker.registr_name)
async def registr_name(message: Message, state: FSMContext):
    reg_name = message.text
    if len(reg_name) > 2:
        await state.set_state(Worker.registr_region)
        await state.update_data(name=message.text)
        regions = await work_mark.db_region()
        await message.answer_photo(photo="https://sun9-14.userapi.com/impg/IssyepRA_sRxWEgxWWqCgKjie5r9s_f-hOlbcw/G4TSsYRhlcs.jpg?size=1280x1152&quality=95&sign=f4ef9b29c9c850528f0fafb17b790c58&type=album",
                                   caption="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω —Ä–∞–±–æ—Ç—ã", reply_markup=regions)
    else:
        await state.set_state(Worker.registr_name)
        await message.answer("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è")


#–û–¢–ö–†–´–¢–ò–ï –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ, –ü–û–°–õ–ï –£–°–ü–ï–®–ù–û–ô –†–ï–ì–ò–°–¢–ê–†–¶–ò–ò
@router.callback_query(Worker.registr_region)
async def registr_region(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(region=callback.data)
    data = await state.get_data()
    number = data.get("number")
    name = data.get("name")
    region = data.get("region")
    telegram_id = data.get("telegram_id")
    await main_db.add_worker(name,number,region,telegram_id)
    await callback.message.delete()
    await callback.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ",reply_markup=work_mark.WorkerMainMenu)
    await state.set_state(Worker.worker_action)


#–í–û–ó–í–†–ê–¢ –í –û–°–ù–û–í–ù–û–ï –ú–ï–ù–Æ –†–ê–ë–û–ß–ï–ì–û
@router.callback_query(F.data == "worker_main_menu")
async def worker_main_menu(callback: types.CallbackQuery, state: FSMContext):
    telegram_id = callback.from_user.id
    #–ï–°–õ–ò –†–ê–ë–û–ß–ò–ô –£–ñ–ï –ó–ê–†–ï–ì–ï–°–¢–†–ò–†–û–í–ê–ù
    if await main_db.find_worker(telegram_id) == True:
        await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ", reply_markup=work_mark.WorkerMainMenu)
        await state.set_state(Worker.worker_action)
    else:
        #–ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê –ü–†–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò
        await state.set_state(Worker.registr_number)
        await callback.message.delete()
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")

# –í–û–ó–í–†–ê–¢ –í –û–°–ù–û–í–ù–û–ï –ú–ï–ù–Æ –†–ê–ë–û–ß–ï–ì–û –ò–ó –ú–ï–ù–Æ –° –§–û–¢–û
@router.callback_query(F.data == "worker_region_main_menu")
async def worker_region_main_menu(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ", reply_markup=work_mark.WorkerMainMenu)
    await state.set_state(Worker.worker_action)
#–í–û–ó–í–†–ê–¢ –í –ú–ï–ù–Æ –í–´–ë–û–†–ê –î–ù–Ø –ù–ï–î–ï–õ–ò –ü–†–ò –°–û–ó–î–ê–ù–ò–ï
@router.callback_query(F.data == "worker_schedules_day_menu")
async def worker_schedules_day_menu(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å", reply_markup=work_mark.WorkerSchedulesDaysMenu)
    await state.set_state(Worker.worker_add_schedules)


#–í–û–ó–í–†–ê–¢ –í –ú–ï–ù–Æ –í–´–ë–û–†–ê –î–õ–Ø –ù–ï–î–ï–õ–ò –ü–†–ò –û–ë–ù–û–í–õ–ï–ù–ò–ï
@router.callback_query(F.data == "worker_update_schedules_day_menu")
async def worker_schedules_day_menu(callback: types.CallbackQuery, state: FSMContext):
    telegram_id = callback.from_user.id
    work_mark_days = await work_mark.db_update_schedules_day(telegram_id)
    await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å", reply_markup=work_mark_days)
    await state.set_state(Worker.worker_update_schedules)









#–û–ë–†–ê–ë–û–¢–ß–ò–ö –í–´–ë–û–†–ê –î–ù–Ø –ù–ï–î–ï–õ–ò –ü–†–ò –°–û–ó–î–ê–ù–ò–ï –†–ê–°–ü–ò–°–ê–ù–ò–ï
@router.callback_query(F.data == "worker_add_schedules")
async def worker_add_schedules(callback: types.CallbackQuery, state: FSMContext):
    telegram_id = callback.from_user.id
    # –ï–°–õ–ò –†–ê–ë–û–ß–ò–ô –£–ñ–ï –ó–ê–†–ï–ì–ï–°–¢–†–ò–†–û–í–ê–ù
    if await main_db.find_worker(telegram_id) == True:
        await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å",reply_markup=work_mark.WorkerSchedulesDaysMenu)
        await state.set_state(Worker.worker_add_schedules)
    else:
        #–ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê –ü–†–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò
        await state.set_state(Worker.registr_number)
        await callback.message.delete()
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")


#–û–ë–†–ê–ë–û–¢–ß–ò–ö –í–´–ë–û–†–ê –í–†–ï–ú–ï–ù–ò –ü–†–ò –°–û–ó–î–ê–ù–ò–ï –†–ê–°–ü–ò–°–ê–ù–ò–Ø
@router.callback_query(Worker.worker_add_schedules)
async def worker_add_schedules(callback: types.CallbackQuery, state: FSMContext):
    if callback.data in work_mark.Days_Schedules:
        await state.update_data(day=callback.data)
        await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Å–≤–æ–±–æ–¥–Ω—ã",reply_markup=work_mark.AddTimeSchedules)
        await state.set_state(Worker.worker_add_time_schedules)



#–ó–ê–ü–ò–°–´–í–ê–ù–ò–ï –í–†–ï–ú–ï–ù–ò –í –ë–ê–ó–£ –î–ê–ù–ù–´–• –ò –û–¢–°–´–õ–ê–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ê–ú
@router.callback_query(Worker.worker_add_time_schedules)
async def worker_add_time_schedules(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    day = data.get("day")
    time = callback.data
    telegram_id = callback.from_user.id
    # –ï–°–õ–ò –†–ê–ë–û–ß–ò–ô –£–ñ–ï –ó–ê–†–ï–ì–ï–°–¢–†–ò–†–û–í–ê–ù
    if await main_db.find_worker(telegram_id) == True:
        if day in work_mark.Days_Schedules:
            if time in work_mark.Times_schedules:
                await main_db.add_schedules(telegram_id,time,day)
                await state.set_state(Worker.worker_add_time_schedules)
                await callback.answer(text="–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ", show_alert=True)
            elif callback.data == "all_day":
                for schedule_time in work_mark.Times_schedules:
                    await main_db.add_schedules(telegram_id, schedule_time, day)
                await callback.answer(text="–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ", show_alert=True)
                await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å", reply_markup=work_mark.WorkerSchedulesDaysMenu)
                await state.set_state(Worker.worker_add_schedules)

                # admins_str = os.getenv("ADMINS_ID")
                # admins_id = admins_str.split(',')
                # for admin in admins_id:
                #     await callback.message.bot.send_message(text=f"üïë–û–±–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day}", chat_id=admin)
    else:
        #–ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê –ü–†–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò
        await state.set_state(Worker.registr_number)
        await callback.message.delete()
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")





#–û–ë–†–ê–ë–û–¢–ß–ò–ö –í–´–ë–û–†–ê –î–ù–Ø –ù–ï–î–ï–õ–ò –ü–†–ò –ò–ó–ú–ï–ù–ï–ù–ò–ï –†–ê–°–ü–ò–°–ê–ù–ò–ï
@router.callback_query(F.data == "worker_update_schedules")
async def worker_update_schedules(callback: types.CallbackQuery, state: FSMContext):
    telegram_id = callback.from_user.id
    if await main_db.find_worker(telegram_id) == True:
        work_mark_days = await work_mark.db_update_schedules_day(telegram_id)
        await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å", reply_markup=work_mark_days)
        await state.set_state(Worker.worker_update_schedules)
    else:
        #–ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê –ü–†–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò
        await state.set_state(Worker.registr_number)
        await callback.message.delete()
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")





#–û–ë–†–ê–ë–û–¢–ß–ò–ö –í–´–ë–û–†–ê –í–†–ï–ú–ï–ù–ò –ü–†–ò –ò–ó–ú–ï–ù–ï–ù–ò–ï –†–ê–°–ü–ò–°–ê–ù–ò–Ø
@router.callback_query(Worker.worker_update_schedules)
async def worker_update_schedules(callback: types.CallbackQuery, state: FSMContext):
    day = callback.data
    telegram_id = callback.from_user.id
    if day in await main_db.get_schedules_day(callback.from_user.id):
        work_mark_times = await work_mark.db_update_schedules_time_of_day(telegram_id,day)
        await state.update_data(day=callback.data)
        await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å",reply_markup=work_mark_times)
        await state.set_state(Worker.worker_update_time_schedules_confrim)



#–û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø –î–ï–ô–°–¢–í–ò–Ø –ü–†–ò –í–´–ë–û–†–ê –í–†–ï–ú–ï–ù–ò –ü–†–ò –ò–ó–ú–ï–ù–ï–ù–ò–ï –†–ê–°–ü–ò–°–ê–ù–ò–Ø
@router.callback_query(Worker.worker_update_time_schedules_confrim)
async def worker_update_schedules(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(time=callback.data)
    data = await state.get_data()
    day = data.get("day")
    telegram_id = callback.from_user.id

    if await main_db.find_worker(telegram_id) == True:
        if day in await main_db.get_schedules_day(callback.from_user.id):
            confrim_menu = await work_mark.confrim_menu()
            await callback.message.edit_text(f"–£–≤–µ—Ä–µ–Ω—ã –≤ –¥–∞–Ω–Ω–æ–º –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=confrim_menu)
            await state.set_state(Worker.worker_update_time_schedules)
    else:
        #–ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê –ü–†–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò
        await state.set_state(Worker.registr_number)
        await callback.message.delete()
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")


#–ó–ê–ü–ò–°–´–í–ê–ù–ò–ï –ò–ó–ú–ï–ù–ï–ù–ù–û–ì–û –í–†–ï–ú–ï–ù–ò –í –ë–ê–ó–£ –î–ê–ù–ù–´–• –ò –û–¢–°–´–õ–ê–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ê–ú
@router.callback_query(Worker.worker_update_time_schedules)
async def worker_update_time_schedules(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    day = data.get("day")
    time = data.get("time")
    telegram_id = callback.from_user.id
    # –ï–°–õ–ò –†–ê–ë–û–ß–ò–ô –£–ñ–ï –ó–ê–†–ï–ì–ï–°–¢–†–ò–†–û–í–ê–ù
    if callback.data == "confirm_yes":
        if await main_db.find_worker(telegram_id) == True:
            if day in await main_db.get_schedules_day(callback.from_user.id):
                if time in await main_db.get_schedules_time_of_day(callback.from_user.id, day):
                    await main_db.delete_schedules_time(telegram_id,time,day)
                    work_mark_times = await work_mark.db_update_schedules_time_of_day(telegram_id, day)
                    await callback.answer(text="–£–¥–∞–ª–µ–Ω–æ", show_alert=True)
                    await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å", reply_markup=work_mark_times)
                    await state.set_state(Worker.worker_update_time_schedules)

                    admins_str = os.getenv("ADMINS_ID")
                    admins_id = admins_str.split(',')
                    for admin in admins_id:
                        await callback.message.bot.send_message(text=f"üïë–û–±–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day}", chat_id=admin)
                else:
                    work_mark_times = await work_mark.db_update_schedules_time_of_day(telegram_id, day)
                    await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å",
                                                     reply_markup=work_mark_times)
                    await state.set_state(Worker.worker_update_time_schedules)
                    await callback.answer(text="–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∞–∫—É—Ç–∞–ª—å–Ω—ã", show_alert=True)
        else:
            #–ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê –ü–†–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò
            await state.set_state(Worker.registr_number)
            await callback.message.delete()
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    else:
        work_mark_times = await work_mark.db_update_schedules_time_of_day(telegram_id, day)
        await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å", reply_markup=work_mark_times)
        await state.set_state(Worker.worker_update_time_schedules_confrim)





#–û–ë–†–ê–ë–û–¢–ß–ò–ö –í–´–í–û–î–ê –ü–û–õ–ù–û–ì–û –†–ê–°–ü–ò–°–ê–ù–ò–Ø –£ –°–û–¢–†–£–î–ù–ò–ö–ê
@router.callback_query(F.data == "worker_all_schedules")
async def worker_all_schedules(callback: types.CallbackQuery, state: FSMContext):
    telegram_id = callback.from_user.id
    if await main_db.find_worker(telegram_id) == True:
        data = await main_db.worker_all_schedules(telegram_id)
        if data:
            final_text = ""
            for day_schedule in data:
                day = day_schedule[0]
                final_text += f"{day}\n"

                for time, installation in day_schedule[1:]:
                    if installation == 1:
                        final_text += f"{time} (–ó–∞—è–≤–∫–∞)\n"
                    else:
                        final_text += f"{time}\n"

                final_text += "\n"

            await callback.message.edit_text(text=final_text, reply_markup=work_mark.BackMainMenu)
        else:
            await callback.message.edit_text(text="–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", reply_markup=work_mark.BackMainMenu)
    else:
        #–ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê –ü–†–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò
        await state.set_state(Worker.registr_number)
        await callback.message.delete()
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")


#–û–ë–†–ê–ë–û–¢–ß–ò–ö –í–´–ë–û–†–ê –†–ï–ì–ò–û–ù–ê –î–õ–Ø –û–ë–ù–û–í–õ–ï–ù–ò–ï
@router.callback_query(F.data == "worker_update_region")
async def worker_update_region(callback: types.CallbackQuery, state: FSMContext):
    regions = await work_mark.db_region()
    telegram_id = callback.from_user.id
    if await main_db.find_worker(telegram_id) == True:
        await callback.message.delete()
        await callback.message.answer_photo(
            photo="https://sun9-14.userapi.com/impg/IssyepRA_sRxWEgxWWqCgKjie5r9s_f-hOlbcw/G4TSsYRhlcs.jpg?size=1280x1152&quality=95&sign=f4ef9b29c9c850528f0fafb17b790c58&type=album",
            caption="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω —Ä–∞–±–æ—Ç—ã", reply_markup=regions)
        await state.set_state(Worker.worker_update_region)
    else:
        #–ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê –ü–†–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò
        await state.set_state(Worker.registr_number)
        await callback.message.delete()
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")

#–û–ë–ù–û–í–õ–ï–ù–ò–ï –†–ï–ì–ò–û–ù–ê –£ –†–ê–ë–û–ß–ï–ì–û
@router.callback_query(Worker.worker_update_region)
async def worker_update_region(callback: types.CallbackQuery, state: FSMContext):
    region = callback.data
    telegram_id = callback.from_user.id
    await main_db.worker_update_region(region,telegram_id)
    await callback.message.delete()
    await callback.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ",reply_markup=work_mark.WorkerMainMenu)
    await state.set_state(Worker.worker_action)





#–ï–°–õ–ò –ù–ï –ù–ê–®–ï–õ–°–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö –ú–ï–ù–Æ(–ø–æ callback)
@router.callback_query(lambda c: True)
async def other_callback(callback: CallbackQuery, state: FSMContext):
    telegram_id = str(callback.from_user.id)
    admins_str = os.getenv("ADMINS_ID")
    admins_id = admins_str.split(',')
    if telegram_id in admins_id:
        await state.set_state(Admin.admin_action)
        await callback.message.delete()
        await callback.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ", reply_markup=adm_mark.AdminMainMenu)
    elif await main_db.find_worker(telegram_id) == True:
        await callback.message.delete()
        await callback.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ", reply_markup=work_mark.WorkerMainMenu)
        await state.set_state(Worker.worker_action)
    else:
        #–ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê –ü–†–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò
        await state.set_state(Worker.registr_number)
        await callback.message.delete()
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")











